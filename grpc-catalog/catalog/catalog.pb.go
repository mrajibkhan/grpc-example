// Code generated by protoc-gen-go. DO NOT EDIT.
// source: catalog.proto

/*
Package catalog is a generated protocol buffer package.

It is generated from these files:
	catalog.proto

It has these top-level messages:
	Product
	Bundle
	CatalogItem
	Catalog
	Empty
	SearchRequest
*/
package catalog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Product struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type Bundle struct {
	Quantity int64   `protobuf:"varint,1,opt,name=quantity" json:"quantity,omitempty"`
	Price    float32 `protobuf:"fixed32,2,opt,name=price" json:"price,omitempty"`
}

func (m *Bundle) Reset()                    { *m = Bundle{} }
func (m *Bundle) String() string            { return proto.CompactTextString(m) }
func (*Bundle) ProtoMessage()               {}
func (*Bundle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Bundle) GetQuantity() int64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Bundle) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

type CatalogItem struct {
	Product *Product  `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
	Bundles []*Bundle `protobuf:"bytes,2,rep,name=bundles" json:"bundles,omitempty"`
}

func (m *CatalogItem) Reset()                    { *m = CatalogItem{} }
func (m *CatalogItem) String() string            { return proto.CompactTextString(m) }
func (*CatalogItem) ProtoMessage()               {}
func (*CatalogItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CatalogItem) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (m *CatalogItem) GetBundles() []*Bundle {
	if m != nil {
		return m.Bundles
	}
	return nil
}

type Catalog struct {
	CatalogId    string         `protobuf:"bytes,1,opt,name=catalogId" json:"catalogId,omitempty"`
	CatalogName  string         `protobuf:"bytes,2,opt,name=catalogName" json:"catalogName,omitempty"`
	CatalogItems []*CatalogItem `protobuf:"bytes,3,rep,name=catalogItems" json:"catalogItems,omitempty"`
}

func (m *Catalog) Reset()                    { *m = Catalog{} }
func (m *Catalog) String() string            { return proto.CompactTextString(m) }
func (*Catalog) ProtoMessage()               {}
func (*Catalog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Catalog) GetCatalogId() string {
	if m != nil {
		return m.CatalogId
	}
	return ""
}

func (m *Catalog) GetCatalogName() string {
	if m != nil {
		return m.CatalogName
	}
	return ""
}

func (m *Catalog) GetCatalogItems() []*CatalogItem {
	if m != nil {
		return m.CatalogItems
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SearchRequest struct {
	CatalogName string `protobuf:"bytes,1,opt,name=catalogName" json:"catalogName,omitempty"`
	ProductName string `protobuf:"bytes,2,opt,name=productName" json:"productName,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SearchRequest) GetCatalogName() string {
	if m != nil {
		return m.CatalogName
	}
	return ""
}

func (m *SearchRequest) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func init() {
	proto.RegisterType((*Product)(nil), "Product")
	proto.RegisterType((*Bundle)(nil), "Bundle")
	proto.RegisterType((*CatalogItem)(nil), "CatalogItem")
	proto.RegisterType((*Catalog)(nil), "Catalog")
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*SearchRequest)(nil), "SearchRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CatalogService service

type CatalogServiceClient interface {
	GetCatalogs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (CatalogService_GetCatalogsClient, error)
	GetCatalogByName(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Catalog, error)
	GetCatalogProductByName(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Product, error)
}

type catalogServiceClient struct {
	cc *grpc.ClientConn
}

func NewCatalogServiceClient(cc *grpc.ClientConn) CatalogServiceClient {
	return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) GetCatalogs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (CatalogService_GetCatalogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CatalogService_serviceDesc.Streams[0], c.cc, "/CatalogService/GetCatalogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &catalogServiceGetCatalogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CatalogService_GetCatalogsClient interface {
	Recv() (*Catalog, error)
	grpc.ClientStream
}

type catalogServiceGetCatalogsClient struct {
	grpc.ClientStream
}

func (x *catalogServiceGetCatalogsClient) Recv() (*Catalog, error) {
	m := new(Catalog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *catalogServiceClient) GetCatalogByName(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Catalog, error) {
	out := new(Catalog)
	err := grpc.Invoke(ctx, "/CatalogService/GetCatalogByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetCatalogProductByName(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := grpc.Invoke(ctx, "/CatalogService/GetCatalogProductByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CatalogService service

type CatalogServiceServer interface {
	GetCatalogs(*Empty, CatalogService_GetCatalogsServer) error
	GetCatalogByName(context.Context, *SearchRequest) (*Catalog, error)
	GetCatalogProductByName(context.Context, *SearchRequest) (*Product, error)
}

func RegisterCatalogServiceServer(s *grpc.Server, srv CatalogServiceServer) {
	s.RegisterService(&_CatalogService_serviceDesc, srv)
}

func _CatalogService_GetCatalogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CatalogServiceServer).GetCatalogs(m, &catalogServiceGetCatalogsServer{stream})
}

type CatalogService_GetCatalogsServer interface {
	Send(*Catalog) error
	grpc.ServerStream
}

type catalogServiceGetCatalogsServer struct {
	grpc.ServerStream
}

func (x *catalogServiceGetCatalogsServer) Send(m *Catalog) error {
	return x.ServerStream.SendMsg(m)
}

func _CatalogService_GetCatalogByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetCatalogByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CatalogService/GetCatalogByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetCatalogByName(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetCatalogProductByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetCatalogProductByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CatalogService/GetCatalogProductByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetCatalogProductByName(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CatalogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CatalogService",
	HandlerType: (*CatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCatalogByName",
			Handler:    _CatalogService_GetCatalogByName_Handler,
		},
		{
			MethodName: "GetCatalogProductByName",
			Handler:    _CatalogService_GetCatalogProductByName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCatalogs",
			Handler:       _CatalogService_GetCatalogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "catalog.proto",
}

func init() { proto.RegisterFile("catalog.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xd1, 0x6b, 0xea, 0x30,
	0x14, 0xc6, 0xad, 0x5e, 0xad, 0x9e, 0xaa, 0x5c, 0x0e, 0xc2, 0x2d, 0x72, 0x1f, 0xba, 0x0c, 0x86,
	0x4f, 0xc1, 0x39, 0xf6, 0xb2, 0xc7, 0x8e, 0x31, 0x7c, 0x19, 0x12, 0xf7, 0x0f, 0xd4, 0x34, 0x38,
	0x99, 0x35, 0x35, 0x4d, 0x07, 0xb2, 0x7f, 0x65, 0x7f, 0xec, 0x30, 0x89, 0x6b, 0xdd, 0xd8, 0x5b,
	0xce, 0x97, 0xf3, 0xe5, 0xf7, 0x7d, 0xb4, 0x30, 0xe0, 0x89, 0x4e, 0xb6, 0x72, 0x4d, 0x73, 0x25,
	0xb5, 0x24, 0xd7, 0xe0, 0x2f, 0x94, 0x4c, 0x4b, 0xae, 0x11, 0xe1, 0xcf, 0x2e, 0xc9, 0x44, 0xe8,
	0x45, 0xde, 0xa4, 0xc7, 0xcc, 0xf9, 0xa8, 0x71, 0x99, 0x8a, 0xb0, 0x69, 0xb5, 0xe3, 0x99, 0xdc,
	0x41, 0x27, 0x2e, 0x77, 0xe9, 0x56, 0xe0, 0x18, 0xba, 0xfb, 0x32, 0xd9, 0xe9, 0x8d, 0x3e, 0x18,
	0x57, 0x8b, 0x7d, 0xcd, 0x38, 0x82, 0x76, 0xae, 0x36, 0xdc, 0x5a, 0x9b, 0xcc, 0x0e, 0xe4, 0x19,
	0x82, 0x7b, 0xcb, 0x9f, 0x6b, 0x91, 0x21, 0x01, 0x3f, 0xb7, 0x74, 0xe3, 0x0f, 0x66, 0x5d, 0xea,
	0xd2, 0xb0, 0xd3, 0x05, 0x5e, 0x80, 0xbf, 0x32, 0xb8, 0x22, 0x6c, 0x46, 0xad, 0x49, 0x30, 0xf3,
	0xa9, 0xc5, 0xb3, 0x93, 0x4e, 0xde, 0xc1, 0x77, 0xaf, 0xe2, 0x7f, 0xe8, 0xb9, 0x82, 0xf3, 0xd4,
	0x35, 0xa9, 0x04, 0x8c, 0x20, 0x70, 0xc3, 0xd3, 0xb1, 0xa9, 0x6d, 0x55, 0x97, 0x70, 0x0a, 0x7d,
	0x5e, 0x05, 0x2c, 0xc2, 0x96, 0x41, 0xf6, 0x69, 0x2d, 0x35, 0x3b, 0xdb, 0x20, 0x3e, 0xb4, 0x1f,
	0xb2, 0x5c, 0x1f, 0xc8, 0x12, 0x06, 0x4b, 0x91, 0x28, 0xfe, 0xc2, 0xc4, 0xbe, 0x14, 0x85, 0xfe,
	0x4e, 0xf3, 0x7e, 0xd2, 0x22, 0x08, 0x5c, 0xcd, 0x7a, 0x9e, 0x9a, 0x34, 0xfb, 0xf0, 0x60, 0xe8,
	0xd8, 0x4b, 0xa1, 0xde, 0x36, 0x5c, 0xe0, 0x25, 0x04, 0x8f, 0x42, 0x3b, 0xb1, 0xc0, 0x0e, 0x35,
	0xf8, 0x71, 0xf7, 0x94, 0x91, 0x34, 0xa6, 0x1e, 0x52, 0xf8, 0x5b, 0x2d, 0xc5, 0x07, 0x43, 0x1b,
	0xd2, 0xb3, 0x7c, 0x75, 0x07, 0xde, 0xc2, 0xbf, 0x6a, 0xdf, 0x7d, 0x83, 0x5f, 0x6d, 0xee, 0x9e,
	0x34, 0xe2, 0x2b, 0x18, 0x71, 0x99, 0xd1, 0x4c, 0xbd, 0xd2, 0xb5, 0xca, 0x39, 0x75, 0xe5, 0xe2,
	0x7e, 0xf5, 0x92, 0x96, 0x0b, 0x6f, 0xd5, 0x31, 0x7f, 0xdb, 0xcd, 0x67, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x4d, 0x9c, 0x04, 0x27, 0x7e, 0x02, 0x00, 0x00,
}
